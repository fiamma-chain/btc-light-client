{
  "address": "0x32565992852D07Ceb3Da9DDa1A2ccC6B7941d3B8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_mirror",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "mirror",
      "outputs": [
        {
          "internalType": "contract IBtcMirror",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNum",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "blockHeader",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "txIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "txMerkleProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "rawTx",
              "type": "bytes"
            }
          ],
          "internalType": "struct TxInclusionProof",
          "name": "inclusionProof",
          "type": "tuple"
        }
      ],
      "name": "verifyInclusion",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minConfirmations",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockNum",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "blockHeader",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "txId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "txIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "txMerkleProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "rawTx",
              "type": "bytes"
            }
          ],
          "internalType": "struct BtcTxProof",
          "name": "inclusionProof",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "txOutIx",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "destScriptHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountSats",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "checkOpReturn",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "opReturnOutIx",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "opReturnData",
          "type": "bytes32"
        }
      ],
      "name": "verifyPayment",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8a1b8bfd8f22e16776b4c1a978d131de3c314ea86788784d3c0067381ce569e2",
  "receipt": {
    "to": null,
    "from": "0x4d7bb17e7b9FB7e670A956c9A066169707C0DeF7",
    "contractAddress": "0x32565992852D07Ceb3Da9DDa1A2ccC6B7941d3B8",
    "transactionIndex": 68,
    "gasUsed": "1202825",
    "logsBloom": "0x
    "blockHash": "0xbb4f65325fbf2216a79124e20624e56c6719439c189d639f5978299ce470a33d",
    "transactionHash": "0x8a1b8bfd8f22e16776b4c1a978d131de3c314ea86788784d3c0067381ce569e2",
    "logs": [],
    "blockNumber": 23602133,
    "cumulativeGasUsed": "9699170",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBd83dFEa0bCDBdE65b80Cee727eD7727575db1E9"
  ],
  "numDeployments": 1,
  "solcInputHash": "280c21bd7d426af96f5036d79f7269bf",
  "metadata": "{\"compiler\":{\"version\":\"0.8.30+commit.73712a01\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mirror\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"mirror\",\"outputs\":[{\"internalType\":\"contract IBtcMirror\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txMerkleProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rawTx\",\"type\":\"bytes\"}],\"internalType\":\"struct TxInclusionProof\",\"name\":\"inclusionProof\",\"type\":\"tuple\"}],\"name\":\"verifyInclusion\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minConfirmations\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"blockHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"txIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"txMerkleProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rawTx\",\"type\":\"bytes\"}],\"internalType\":\"struct BtcTxProof\",\"name\":\"inclusionProof\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"txOutIx\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destScriptHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountSats\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"checkOpReturn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"opReturnOutIx\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"opReturnData\",\"type\":\"bytes32\"}],\"name\":\"verifyPayment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"verifyInclusion(uint256,uint256,(bytes,uint256,bytes,bytes))\":{\"params\":{\"blockNum\":\"The block number to verify inclusion in.\",\"inclusionProof\":\"The proof of inclusion of the transaction in the block.\",\"minConfirmations\":\"The minimum number of confirmations required for the block to be considered valid.\"},\"returns\":{\"_0\":\"True if the transaction is included in the block, false otherwise.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mirror()\":{\"notice\":\"Returns the underlying mirror associated with this verifier.\"},\"verifyInclusion(uint256,uint256,(bytes,uint256,bytes,bytes))\":{\"notice\":\"Verifies that the a transaction is included in a given block.\"},\"verifyPayment(uint256,uint256,(bytes,bytes32,uint256,bytes,bytes),uint256,bytes32,uint256,bool,uint256,bytes32)\":{\"notice\":\"Verifies that the a transaction cleared, paying a given amount to         a given address. Specifically, verifies a proof that the tx was         in block N, and that block N has at least M confirmations.         Also verifies that if checkOpReturn is true, the transaction has an OP_RETURN output         with the given data, and that the output is at the given index.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/BtcTxVerifier.sol\":\"BtcTxVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"src/BtcProofUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./Endian.sol\\\";\\nimport \\\"./interfaces/BtcTxProof.sol\\\";\\nimport \\\"./interfaces/IBtcTxVerifier.sol\\\";\\n\\n/**\\n * @dev A parsed (but NOT fully validated) Bitcoin transaction.\\n */\\nstruct BitcoinTx {\\n    /**\\n     * @dev Whether we successfully parsed this Bitcoin TX, valid version etc.\\n     *      Does NOT check signatures or whether inputs are unspent.\\n     */\\n    bool validFormat;\\n    /**\\n     * @dev Version. Must be 1 or 2.\\n     */\\n    uint32 version;\\n    /**\\n     * @dev Each input spends a previous UTXO.\\n     */\\n    BitcoinTxIn[] inputs;\\n    /**\\n     * @dev Each output creates a new UTXO.\\n     */\\n    BitcoinTxOut[] outputs;\\n    /**\\n     * @dev Locktime. Either 0 for no lock, blocks if <500k, or seconds.\\n     */\\n    uint32 locktime;\\n}\\n\\nstruct BitcoinTxIn {\\n    /**\\n     * @dev Previous transaction.\\n     */\\n    uint256 prevTxID;\\n    /**\\n     * @dev Specific output from that transaction.\\n     */\\n    uint32 prevTxIndex;\\n    /**\\n     * @dev Mostly useless for tx v1, BIP68 Relative Lock Time for tx v2.\\n     */\\n    uint32 seqNo;\\n    /**\\n     * @dev Input script length\\n     */\\n    uint32 scriptLen;\\n    /**\\n     * @dev Input script, spending a previous UTXO. Over 32 bytes unsupported.\\n     */\\n    bytes32 script;\\n}\\n\\nstruct BitcoinTxOut {\\n    /**\\n     * @dev TXO value, in satoshis\\n     */\\n    uint64 valueSats;\\n    /**\\n     * @dev Output script length\\n     */\\n    uint32 scriptLen;\\n    /**\\n     * @dev Output script. Over 32 bytes unsupported.\\n     */\\n    bytes script;\\n}\\n\\n//\\n//                                        #\\n//                                       # #\\n//                                      # # #\\n//                                     # # # #\\n//                                    # # # # #\\n//                                   # # # # # #\\n//                                  # # # # # # #\\n//                                 # # # # # # # #\\n//                                # # # # # # # # #\\n//                               # # # # # # # # # #\\n//                              # # # # # # # # # # #\\n//                                   # # # # # #\\n//                               +        #        +\\n//                                ++++         ++++\\n//                                  ++++++ ++++++\\n//                                    +++++++++\\n//                                      +++++\\n//                                        +\\n//\\n// BtcProofUtils provides functions to prove things about Bitcoin transactions.\\n// Verifies merkle inclusion proofs, transaction IDs, and payment details.\\nlibrary BtcProofUtils {\\n    /**\\n     * @dev Validates that a given payment appears under a given block hash.\\n     *\\n     * This verifies all of the following:\\n     * 1. Raw transaction really does pay X satoshis to Y script hash.\\n     * 2. Raw transaction hashes to the given transaction ID.\\n     * 3. Transaction ID appears under transaction root (Merkle proof).\\n     * 4. Transaction root is part of the block header.\\n     * 5. Block header hashes to a given block hash.\\n     *\\n     * The caller must separately verify that the block hash is in the chain.\\n     *\\n     * Always returns true or reverts with a descriptive reason.\\n     */\\n    function validatePayment(\\n        bytes32 blockHash,\\n        BtcTxProof calldata txProof,\\n        uint256 txOutIx,\\n        bytes32 destScriptHash,\\n        uint256 satoshisExpected,\\n        bool checkOpReturn,\\n        uint256 opReturnOutIx,\\n        bytes32 opReturnDataExpected\\n    ) internal pure returns (bool) {\\n        // 1. Block header to block hash\\n        require(getBlockHash(txProof.blockHeader) == blockHash, \\\"Block hash mismatch\\\");\\n\\n        // 2. and 3. Transaction ID included in block\\n        bytes32 blockTxRoot = getBlockTxMerkleRoot(txProof.blockHeader);\\n        bytes32 txRoot = getTxMerkleRoot(txProof.txId, txProof.txIndex, txProof.txMerkleProof);\\n        require(blockTxRoot == txRoot, \\\"Tx merkle root mismatch\\\");\\n\\n        // 4. Raw transaction to TxID\\n        require(getTxID(txProof.rawTx) == txProof.txId, \\\"Tx ID mismatch\\\");\\n\\n        // 5. Finally, validate raw transaction pays stated recipient.\\n        BitcoinTx memory parsedTx = parseBitcoinTx(txProof.rawTx);\\n        BitcoinTxOut memory txo = parsedTx.outputs[txOutIx];\\n        require(destScriptHash == sha256(txo.script), \\\"Script mismatch\\\");\\n        require(txo.valueSats == satoshisExpected, \\\"Amount mismatch\\\");\\n\\n        // 6. Check OP_RETURN output if requested\\n        if (checkOpReturn) {\\n            BitcoinTxOut memory opReturnTxo = parsedTx.outputs[opReturnOutIx];\\n            bytes32 opReturnData = getOpReturnScriptData(opReturnTxo.scriptLen, opReturnTxo.script);\\n            require(opReturnData == opReturnDataExpected, \\\"OP_RETURN data mismatch\\\");\\n        }\\n\\n        // We've verified that blockHash contains a P2SH transaction\\n        // that sends at least satoshisExpected to the given hash.\\n        return true;\\n    }\\n\\n    function validateInclusion(bytes32 blockHash, TxInclusionProof calldata inclusionProof)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // 1. Block header to block hash\\n        require(getBlockHash(inclusionProof.blockHeader) == blockHash, \\\"Block hash mismatch\\\");\\n\\n        // 2. Raw transaction to TxID\\n        bytes32 txId = getTxID(inclusionProof.rawTx);\\n\\n        // 2. and 3. Transaction ID included in block\\n        bytes32 blockTxRoot = getBlockTxMerkleRoot(inclusionProof.blockHeader);\\n        bytes32 txRoot = getTxMerkleRoot(txId, inclusionProof.txIndex, inclusionProof.txMerkleProof);\\n        require(blockTxRoot == txRoot, \\\"Tx merkle root mismatch\\\");\\n\\n        // 4. We've verified that blockHash contains the transaction\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Compute a block hash given a block header.\\n     */\\n    function getBlockHash(bytes calldata blockHeader) public pure returns (bytes32) {\\n        require(blockHeader.length == 80, \\\"Invalid block header length\\\");\\n        bytes32 ret = sha256(abi.encodePacked(sha256(blockHeader)));\\n        return bytes32(Endian.reverse256(uint256(ret)));\\n    }\\n\\n    /**\\n     * @dev Get the transactions merkle root given a block header.\\n     */\\n    function getBlockTxMerkleRoot(bytes calldata blockHeader) public pure returns (bytes32) {\\n        require(blockHeader.length == 80);\\n        return bytes32(blockHeader[36:68]);\\n    }\\n\\n    /**\\n     * @dev Recomputes the transactions root given a merkle proof.\\n     */\\n    function getTxMerkleRoot(bytes32 txId, uint256 txIndex, bytes calldata siblings) public pure returns (bytes32) {\\n        bytes32 ret = bytes32(Endian.reverse256(uint256(txId)));\\n        uint256 len = siblings.length / 32;\\n        for (uint256 i = 0; i < len; i++) {\\n            bytes32 s = bytes32(Endian.reverse256(uint256(bytes32(siblings[i * 32:(i + 1) * 32]))));\\n            if (txIndex & 1 == 0) {\\n                ret = doubleSha(abi.encodePacked(ret, s));\\n            } else {\\n                ret = doubleSha(abi.encodePacked(s, ret));\\n            }\\n            txIndex = txIndex >> 1;\\n        }\\n        return ret;\\n    }\\n\\n    /**\\n     * @dev Computes the ubiquitious Bitcoin SHA256(SHA256(x))\\n     */\\n    function doubleSha(bytes memory buf) internal pure returns (bytes32) {\\n        return sha256(abi.encodePacked(sha256(buf)));\\n    }\\n\\n    /**\\n     * @dev Recomputes the transaction ID for a raw transaction.\\n     */\\n    function getTxID(bytes calldata rawTransaction) public pure returns (bytes32) {\\n        bytes32 ret = doubleSha(rawTransaction);\\n        return bytes32(Endian.reverse256(uint256(ret)));\\n    }\\n\\n    /**\\n     * @dev Parses a HASH-SERIALIZED Bitcoin transaction.\\n     *      This means no flags and no segwit witnesses.\\n     */\\n    function parseBitcoinTx(bytes calldata rawTx) public pure returns (BitcoinTx memory ret) {\\n        ret.version = Endian.reverse32(uint32(bytes4(rawTx[0:4])));\\n        if (ret.version < 1 || ret.version > 2) {\\n            return ret; // invalid version\\n        }\\n\\n        // Read transaction inputs\\n        uint256 offset = 4;\\n        uint256 nInputs;\\n        (nInputs, offset) = readVarInt(rawTx, offset);\\n        ret.inputs = new BitcoinTxIn[](nInputs);\\n        for (uint256 i = 0; i < nInputs; i++) {\\n            BitcoinTxIn memory txIn;\\n            txIn.prevTxID = Endian.reverse256(uint256(bytes32(rawTx[offset:offset + 32])));\\n            offset += 32;\\n            txIn.prevTxIndex = Endian.reverse32(uint32(bytes4(rawTx[offset:offset + 4])));\\n            offset += 4;\\n            uint256 nInScriptBytes;\\n            (nInScriptBytes, offset) = readVarInt(rawTx, offset);\\n            // require(nInScriptBytes <= 34, \\\"Scripts over 34 bytes unsupported\\\");\\n            txIn.scriptLen = uint32(nInScriptBytes);\\n            // txIn.script = bytes32(rawTx[offset:offset + nInScriptBytes]);\\n            offset += nInScriptBytes;\\n            txIn.seqNo = Endian.reverse32(uint32(bytes4(rawTx[offset:offset + 4])));\\n            offset += 4;\\n            ret.inputs[i] = txIn;\\n        }\\n\\n        // Read transaction outputs\\n        uint256 nOutputs;\\n        (nOutputs, offset) = readVarInt(rawTx, offset);\\n        ret.outputs = new BitcoinTxOut[](nOutputs);\\n        for (uint256 i = 0; i < nOutputs; i++) {\\n            BitcoinTxOut memory txOut;\\n            txOut.valueSats = Endian.reverse64(uint64(bytes8(rawTx[offset:offset + 8])));\\n            offset += 8;\\n            uint256 nOutScriptBytes;\\n            (nOutScriptBytes, offset) = readVarInt(rawTx, offset);\\n            require(nOutScriptBytes <= 34, \\\"Scripts over 34 bytes unsupported\\\");\\n            txOut.scriptLen = uint32(nOutScriptBytes);\\n            txOut.script = rawTx[offset:offset + nOutScriptBytes];\\n            offset += nOutScriptBytes;\\n            ret.outputs[i] = txOut;\\n        }\\n\\n        // Finally, read locktime, the last four bytes in the tx.\\n        ret.locktime = Endian.reverse32(uint32(bytes4(rawTx[offset:offset + 4])));\\n        offset += 4;\\n        if (offset != rawTx.length) {\\n            return ret; // Extra data at end of transaction.\\n        }\\n\\n        // Parsing complete, sanity checks passed, return success.\\n        ret.validFormat = true;\\n        return ret;\\n    }\\n\\n    /**\\n     * Reads a Bitcoin-serialized varint = a u256 serialized in 1-9 bytes.\\n     */\\n    function readVarInt(bytes calldata buf, uint256 offset) public pure returns (uint256 val, uint256 newOffset) {\\n        uint8 pivot = uint8(buf[offset]);\\n        if (pivot < 0xfd) {\\n            val = pivot;\\n            newOffset = offset + 1;\\n        } else if (pivot == 0xfd) {\\n            val = Endian.reverse16(uint16(bytes2(buf[offset + 1:offset + 3])));\\n            newOffset = offset + 3;\\n        } else if (pivot == 0xfe) {\\n            val = Endian.reverse32(uint32(bytes4(buf[offset + 1:offset + 5])));\\n            newOffset = offset + 5;\\n        } else {\\n            // pivot == 0xff\\n            val = Endian.reverse64(uint64(bytes8(buf[offset + 1:offset + 9])));\\n            newOffset = offset + 9;\\n        }\\n    }\\n\\n    /**\\n     * @dev Verifies that `script` is a standard OP_RETURN script, and extracts the data.\\n     * @return result The data, or 0 if verification failed.\\n     */\\n    function getOpReturnScriptData(uint256 scriptLen, bytes memory script) internal pure returns (bytes32 result) {\\n        if (scriptLen != 34) {\\n            return 0;\\n        }\\n\\n        // index 0: OP_RETURN\\n        // index 1: OP_PUSHBYTES_32\\n        if (script[0] != 0x6a || script[1] != 0x20) {\\n            return 0;\\n        }\\n\\n        assembly {\\n            result := mload(add(add(script, 32), 2))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x01bb55733d72efaa154bbb71988bf2264eeda1ef91838ffc133f7b281e75c4dc\",\"license\":\"MIT\"},\"src/BtcTxVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./interfaces/IBtcMirror.sol\\\";\\nimport \\\"./interfaces/IBtcTxVerifier.sol\\\";\\nimport \\\"./BtcProofUtils.sol\\\";\\n\\n//\\n//                                        #\\n//                                       # #\\n//                                      # # #\\n//                                     # # # #\\n//                                    # # # # #\\n//                                   # # # # # #\\n//                                  # # # # # # #\\n//                                 # # # # # # # #\\n//                                # # # # # # # # #\\n//                               # # # # # # # # # #\\n//                              # # # # # # # # # # #\\n//                                   # # # # # #\\n//                               +        #        +\\n//                                ++++         ++++\\n//                                  ++++++ ++++++\\n//                                    +++++++++\\n//                                      +++++\\n//                                        +\\n//\\n// BtcVerifier implements a merkle proof that a Bitcoin payment succeeded. It\\n// uses BtcMirror as a source of truth for which Bitcoin block hashes are in the\\n// canonical chain.\\ncontract BtcTxVerifier is IBtcTxVerifier {\\n    IBtcMirror public immutable mirror;\\n\\n    constructor(address _mirror) {\\n        mirror = IBtcMirror(_mirror);\\n    }\\n\\n    function verifyPayment(\\n        uint256 minConfirmations,\\n        uint256 blockNum,\\n        BtcTxProof calldata inclusionProof,\\n        uint256 txOutIx,\\n        bytes32 destScriptHash,\\n        uint256 amountSats,\\n        bool checkOpReturn,\\n        uint256 opReturnOutIx,\\n        bytes32 opReturnData\\n    ) external view returns (bool) {\\n        checkHeight(blockNum, minConfirmations);\\n\\n        bytes32 blockHash = mirror.getBlockHash(blockNum);\\n        return BtcProofUtils.validatePayment(\\n            blockHash, inclusionProof, txOutIx, destScriptHash, amountSats, checkOpReturn, opReturnOutIx, opReturnData\\n        );\\n    }\\n\\n    function verifyInclusion(uint256 minConfirmations, uint256 blockNum, TxInclusionProof calldata inclusionProof)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        checkHeight(blockNum, minConfirmations);\\n\\n        bytes32 blockHash = mirror.getBlockHash(blockNum);\\n        return BtcProofUtils.validateInclusion(blockHash, inclusionProof);\\n    }\\n\\n    function checkHeight(uint256 blockNum, uint256 minConfirmations) internal view {\\n        uint256 mirrorHeight = mirror.getLatestBlockHeight();\\n        require(mirrorHeight >= blockNum, \\\"Bitcoin Mirror doesn't have that block yet\\\");\\n        require(mirrorHeight + 1 >= minConfirmations + blockNum, \\\"Not enough Bitcoin block confirmations\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x25381d89d96381f071559d82994a40212e3c2b9d2f7590677a455014e63266ea\",\"license\":\"MIT\"},\"src/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n// Bitwise math helpers for dealing with Bitcoin block headers.\\n// Bitcoin block fields are little-endian. Must flip to big-endian for EVM.\\nlibrary Endian {\\n    function reverse256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        uint256 pat1 = 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00;\\n        v = ((v & pat1) >> 8) | ((v & ~pat1) << 8);\\n\\n        // swap 2-byte long pairs\\n        uint256 pat2 = 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000;\\n        v = ((v & pat2) >> 16) | ((v & ~pat2) << 16);\\n\\n        // swap 4-byte long pairs\\n        uint256 pat4 = 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000;\\n        v = ((v & pat4) >> 32) | ((v & ~pat4) << 32);\\n\\n        // swap 8-byte long pairs\\n        uint256 pat8 = 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000;\\n        v = ((v & pat8) >> 64) | ((v & ~pat8) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    function reverse64(uint64 input) internal pure returns (uint64 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) | ((v & 0x00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) | ((v & 0x0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    function reverse32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n}\\n\",\"keccak256\":\"0xd8e99240fb752f33cd9ec286af8902d86ec3fc8e17b25935401bc1780789cabc\",\"license\":\"MIT\"},\"src/interfaces/BtcTxProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @notice Proof that a transaction (rawTx) is in a given block.\\n */\\nstruct BtcTxProof {\\n    /**\\n     * @notice 80-byte block header.\\n     */\\n    bytes blockHeader;\\n    /**\\n     * @notice Bitcoin transaction ID, equal to SHA256(SHA256(rawTx))\\n     */\\n    // This is not gas-optimized--we could omit it and compute from rawTx. But\\n    //s the cost is minimal, and keeping it allows better revert messages.\\n    bytes32 txId;\\n    /**\\n     * @notice Index of transaction within the block.\\n     */\\n    uint256 txIndex;\\n    /**\\n     * @notice Merkle proof. Concatenated sibling hashes, 32*n bytes.\\n     */\\n    bytes txMerkleProof;\\n    /**\\n     * @notice Raw transaction, HASH-SERIALIZED, no witnesses.\\n     */\\n    bytes rawTx;\\n}\\n\\n/**\\n * @notice Proof that a transaction (rawTx) is in a given block.\\n */\\nstruct TxInclusionProof {\\n    /**\\n     * @notice 80-byte block header.\\n     */\\n    bytes blockHeader;\\n    /**\\n     * @notice Index of transaction within the block.\\n     */\\n    uint256 txIndex;\\n    /**\\n     * @notice Merkle proof. Concatenated sibling hashes, 32*n bytes.\\n     */\\n    bytes txMerkleProof;\\n    /**\\n     * @notice Raw transaction, HASH-SERIALIZED, no witnesses.\\n     */\\n    bytes rawTx;\\n}\\n\",\"keccak256\":\"0x4fb888f9bb80c34526cb0a7dabb89eb00e1f892e11920f290268d107a12f7f97\",\"license\":\"MIT\"},\"src/interfaces/IBtcMirror.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\n/**\\n * @notice Tracks Bitcoin. Provides block hashes.\\n */\\ninterface IBtcMirror {\\n    /**\\n     * @notice Returns the Bitcoin block hash at a specific height.\\n     */\\n    function getBlockHash(uint256 number) external view returns (bytes32);\\n\\n    /**\\n     * @notice Returns the height of the latest block (tip of the chain).\\n     */\\n    function getLatestBlockHeight() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the timestamp of the lastest block, as Unix seconds.\\n     */\\n    function getLatestBlockTime() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns latest block height and specific block hash in one call\\n     * @dev This is optimized for LayerZero cross-chain reads to reduce call count\\n     * @param blockNumber The specific block number to get hash for\\n     * @return latestHeight The latest block height\\n     * @return requestedBlockNumber The requested block number\\n     * @return blockHash The hash of the requested block\\n     */\\n    function getLatestHeightAndBlockHash(uint256 blockNumber)\\n        external\\n        view\\n        returns (uint256 latestHeight, uint256 requestedBlockNumber, bytes32 blockHash);\\n\\n    /**\\n     * @notice Submits a new Bitcoin chain segment (80-byte headers) s\\n     */\\n    function submit_uncheck(uint256 blockHeight, bytes calldata blockHeaders, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    /**\\n     * @notice Challenges a previously submitted block by proving it's invalid, and submit the correct chain.\\n     */\\n    function challenge(\\n        uint256 wrong_idx,\\n        bytes calldata wrongBlockHeaders,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        uint256 blockHeight,\\n        bytes calldata blockHeaders\\n    ) external;\\n}\\n\",\"keccak256\":\"0x532f3c549b9ea4c17ee419760d0e31832270e7a2e157bdc8e3e206ac66bfbad6\",\"license\":\"MIT\"},\"src/interfaces/IBtcTxVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.13;\\n\\nimport \\\"./BtcTxProof.sol\\\";\\nimport \\\"./IBtcMirror.sol\\\";\\n\\n/**\\n * @notice Verifies Bitcoin transaction proofs.\\n */\\ninterface IBtcTxVerifier {\\n    /**\\n     * @notice Verifies that the a transaction cleared, paying a given amount to\\n     *         a given address. Specifically, verifies a proof that the tx was\\n     *         in block N, and that block N has at least M confirmations.\\n     *\\n     *         Also verifies that if checkOpReturn is true, the transaction has an OP_RETURN output\\n     *         with the given data, and that the output is at the given index.\\n     */\\n    function verifyPayment(\\n        uint256 minConfirmations,\\n        uint256 blockNum,\\n        BtcTxProof calldata inclusionProof,\\n        uint256 txOutIx,\\n        bytes32 destScriptHash,\\n        uint256 amountSats,\\n        bool checkOpReturn,\\n        uint256 opReturnOutIx,\\n        bytes32 opReturnData\\n    ) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the underlying mirror associated with this verifier.\\n     */\\n    function mirror() external view returns (IBtcMirror);\\n\\n    /**\\n     * @notice Verifies that the a transaction is included in a given block.\\n     *\\n     * @param minConfirmations The minimum number of confirmations required for the block to be considered valid.\\n     * @param blockNum The block number to verify inclusion in.\\n     * @param inclusionProof The proof of inclusion of the transaction in the block.\\n     *\\n     * @return True if the transaction is included in the block, false otherwise.\\n     */\\n    function verifyInclusion(uint256 minConfirmations, uint256 blockNum, TxInclusionProof calldata inclusionProof)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0x39e1e945dab95a9c69d20f67989acc8d89286fca8e1a831335a005dba3c3be4c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c8063444d9172146101a857806354fa54411461004257638d33873a1461003d57600080fd5b6101ed565b346101a35760603660031901126101a35760243560043560443567ffffffffffffffff81116101a3578060040191608060031983360301126101a3576100889084610579565b604051637741562f60e11b815260048101939093526020836024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561019e576101036101589261015e9560009161016f575b506100fd6100f7868061067b565b906108a9565b146106ae565b61012a610125610120610119606485018761067b565b369161096a565b611192565b611079565b61015061014061013a868061067b565b906109ff565b946044602485013594019061067b565b929091610a2c565b146106f0565b6040516001815280602081015b0390f35b610191915060203d602011610197575b610189818361029e565b8101906102c0565b866100e9565b503d61017f565b6102cf565b600080fd5b346101a35760003660031901126101a3577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166080908152602090f35b346101a3576101203660031901126101a35760243560043560443567ffffffffffffffff81116101a35760a060031982360301126101a3576064359260c43560a43560843582151583036101a35761016b966102559660e435956101043597600401916102db565b60405190151581529081906020820190565b634e487b7160e01b600052604160045260246000fd5b60a0810190811067ffffffffffffffff82111761029957604052565b610267565b90601f8019910116810190811067ffffffffffffffff82111761029957604052565b908160209103126101a3575190565b6040513d6000823e3d90fd5b6102ee9098979695939892919283610579565b604051637741562f60e11b815260048101929092526020826024817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa91821561019e576103c16060926103636103d0956103c794600091610475575b506100fd6100f7848061067b565b61037061013a828061067b565b90610395602082013592610158604084013561038e8986018661067b565b9187610a2c565b6103bc60808201926103b66101256101206103b0878761067b565b906109b1565b1461073c565b61067b565b90610cf2565b0196875161078f565b51602060006103e96040840151604051918280926107a8565b039060025afa1561019e5761041f67ffffffffffffffff9161041161042695600051146107d3565b5167ffffffffffffffff1690565b1614610811565b610433575b505050600190565b6104446104679161046d945161078f565b5163ffffffff604061045d602084015163ffffffff1690565b9201519116611016565b1461084f565b38808061042b565b61048e915060203d60201161019757610189818361029e565b38610355565b634e487b7160e01b600052601160045260246000fd5b90600182018092116104b857565b610494565b90602082018092116104b857565b90600482018092116104b857565b90600882018092116104b857565b90600982018092116104b857565b90600582018092116104b857565b90600382018092116104b857565b919082018092116104b857565b1561052557565b60405162461bcd60e51b815260206004820152602660248201527f4e6f7420656e6f75676820426974636f696e20626c6f636b20636f6e6669726d6044820152656174696f6e7360d01b6064820152608490fd5b60405163e875aa5d60e01b81529091906020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa90811561019e57600091610649575b508281106105f1576105ef926105e26105e8926104aa565b92610511565b111561051e565b565b60405162461bcd60e51b815260206004820152602a60248201527f426974636f696e204d6972726f7220646f65736e27742068617665207468617460448201526908189b1bd8dac81e595d60b21b6064820152608490fd5b90506020813d602011610673575b816106646020938361029e565b810103126101a35751386105ca565b3d9150610657565b903590601e19813603018212156101a3570180359067ffffffffffffffff82116101a3576020019181360383136101a357565b156106b557565b60405162461bcd60e51b8152602060048201526013602482015272084d8dec6d640d0c2e6d040dad2e6dac2e8c6d606b1b6044820152606490fd5b156106f757565b60405162461bcd60e51b815260206004820152601760248201527f5478206d65726b6c6520726f6f74206d69736d617463680000000000000000006044820152606490fd5b1561074357565b60405162461bcd60e51b815260206004820152600e60248201526d0a8f040928840dad2e6dac2e8c6d60931b6044820152606490fd5b634e487b7160e01b600052603260045260246000fd5b80518210156107a35760209160051b010190565b610779565b9081519160005b8381106107c0575050016000815290565b80602080928401015181850152016107af565b156107da57565b60405162461bcd60e51b815260206004820152600f60248201526e0a6c6e4d2e0e840dad2e6dac2e8c6d608b1b6044820152606490fd5b1561081857565b60405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840dad2e6dac2e8c6d608b1b6044820152606490fd5b1561085657565b60405162461bcd60e51b815260206004820152601760248201527f4f505f52455455524e2064617461206d69736d617463680000000000000000006044820152606490fd5b908092918237016000815290565b60508203610925576020916000916108c66040518093819361089b565b039060025afa1561019e576020600061090c6108f2610900835160405192839187830160209181520190565b03601f19810183528261029e565b604051918280926107a8565b039060025afa1561019e57610922600051611079565b90565b60405162461bcd60e51b815260206004820152601b60248201527f496e76616c696420626c6f636b20686561646572206c656e67746800000000006044820152606490fd5b92919267ffffffffffffffff82116102995760405191610994601f8201601f19166020018461029e565b8294818452818301116101a3578281602093846000960137010152565b61092291369161096a565b906004116101a35790600490565b909392938483116101a35784116101a3578101920390565b3590602081106109f0575090565b6000199060200360031b1b1690565b90605081036101a3576044116101a3576024013590565b908160051b91808304602014901517156104b857565b610a3890929192611079565b92610a438160051c90565b916000915b838310610a5757505050505090565b9091929394610ac5600191610a93610125610a8d610a7489610a16565b610a85610a808b6104aa565b610a16565b90888a6109ca565b906109e2565b90888416610acf57604080516020810192909252810191909152610abe9061012081606081016108f2565b9660011c90565b9493019190610a48565b604080516020810193909352820152610abe9061012081606081016108f2565b60405190610afc8261027d565b6000608083828152826020820152606060408201526060808201520152565b356001600160e01b0319811692919060048210610b36575050565b6001600160e01b031960049290920360031b82901b16169150565b67ffffffffffffffff81116102995760051b60200190565b60405190610b768261027d565b60006080838281528260208201528260408201528260608201520152565b90610b9e82610b51565b610bab604051918261029e565b8281528092610bbc601f1991610b51565b019060005b828110610bcd57505050565b602090610bd8610b69565b82828501015201610bc1565b604051906060820182811067ffffffffffffffff82111761029957604052606060408360008152600060208201520152565b90610c2082610b51565b610c2d604051918261029e565b8281528092610c3e601f1991610b51565b019060005b828110610c4f57505050565b602090610c5a610be4565b82828501015201610c43565b356001600160c01b0319811692919060088210610c81575050565b6001600160c01b031960089290920360031b82901b16169150565b15610ca357565b60405162461bcd60e51b815260206004820152602160248201527f53637269707473206f76657220333420627974657320756e737570706f7274656044820152601960fa1b6064820152608490fd5b90610cfb610aef565b9163ffffffff610d5d610d4d610d23610d1d610d1787876109bc565b90610b1b565b60e01c90565b600881811b63ff00ff001691901c62ff00ff1617601081811b63ffff00001691901c61ffff161790565b63ffffffff166020860181905290565b166001811090811561100b575b5061100657610d798282611223565b90610d8381610b94565b6040860190815260005b828110610ec257505050610da2908383611355565b9190610dad81610c16565b6060860190815260005b828110610e045750505090610df3610de6610d23610d1d610d17610df8968689610de0826104cb565b926109ca565b63ffffffff166080860152565b6104cb565b03610922576001815290565b610e0c610be4565b94610e16816104d9565b610e22908289886109ca565b610e2b91610c66565b60c01c610e379061141b565b67ffffffffffffffff168652610e4c906104d9565b610e57908786611355565b90610e656022821115610c9c565b63ffffffff81166020880152610e7b8183610511565b610e8790838a896109ca565b3690610e929261096a565b6040880152610ea091610511565b9481835191610eaf828461078f565b52610eb99161078f565b50600101610db7565b610eca610b69565b93610ed4816104bd565b610ee0908289896109ca565b610ee9916109e2565b610ef290611079565b8552610efd906104bd565b610f06816104cb565b610f12908289896109ca565b610f1b91610b1b565b60e01c610f4c90600881811b63ff00ff001691901c62ff00ff1617601081811b63ffff00001691901c61ffff161790565b63ffffffff166020860152610f60906104cb565b610f6b908787611355565b63ffffffff8216606087015290610f8191610511565b610f8a816104cb565b610f96908289896109ca565b610f9f91610b1b565b60e01c610fd090600881811b63ff00ff001691901c62ff00ff1617601081811b63ffff00001691901c61ffff161790565b63ffffffff166040860152610fe4906104cb565b9381835191610ff3828461078f565b52610ffd9161078f565b50600101610d8d565b505090565b600291501138610d6a565b6021190161104d578051156107a35760208101516001600160f81b031916603560f91b14801590611053575b61104d576022015190565b50600090565b508051600110156107a35760218101516001600160f81b031916600160fd1b1415611042565b8060081c9060081b907cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff7dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff007fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00000084167eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff000084161760101c931691161760101b177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff7fffffffff00000000ffffffff00000000ffffffff00000000ffffffff00000000821660201c911660201b1777ffffffffffffffff0000000000000000ffffffffffffffff8019821660401c911660401b1761118e8160801c9160801b90565b1790565b60006111a6602092604051918280926107a8565b039060025afa1561019e57602060006111d08151604051908482015283815261090060408261029e565b039060025afa1561019e5760005190565b908210156107a3570190565b356001600160f01b0319811692919060028210611208575050565b6001600160f01b031960029290920360031b82901b16169150565b60ff61124b611245611237600486866111e1565b356001600160f81b03191690565b60f81c90565b169160fd8310156112635750509061092260046104aa565b909160fd81036112c557506112a061129a6112946112ba946112b39461128960046104aa565b90610de06004610503565b906111ed565b60f01c90565b60ff61ff008260081b169160081c161790565b61ffff1690565b906109226004610503565b60fe0361130657610d23610d1d610d176112fb946112f2946112e760046104aa565b90610de060046104f5565b63ffffffff1690565b9061092260046104f5565b61133861133261132c61134a9461133d9461132160046104aa565b90610de060046104e7565b90610c66565b60c01c90565b61141b565b67ffffffffffffffff1690565b9061092260046104e7565b9092919260ff61136c6112456112378785876111e1565b169060fd82101561138357506109229150926104aa565b9060fd81036113ba57506112b36112a061129a611294610922956113b4956113aa8a6104aa565b90610de08b610503565b92610503565b60fe036113ee576112f2610d23610d1d610d17610922956113e8956113de8a6104aa565b90610de08b6104f5565b926104f5565b61133d61133861133261132c610922956114159561140b8a6104aa565b90610de08b6104e7565b926104e7565b67ffffffffffff000067ff00ff00ff00ff0066ff00ff00ff00ff8360081c169260081b169165ffff0000ffff65ffff0000ff0065ffffffffffff67ffff0000ffff0000861666ff0000ffff000085161760101c16941691161760101b161767ffffffff0000000063ffffffff8260201c169160201b16179056fea2646970667358221220029b80a12ccd6e7fa53d6863eede5027574dadce9572eb9df9116b5f1d2b719d64736f6c634300081e0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "verifyInclusion(uint256,uint256,(bytes,uint256,bytes,bytes))": {
        "params": {
          "blockNum": "The block number to verify inclusion in.",
          "inclusionProof": "The proof of inclusion of the transaction in the block.",
          "minConfirmations": "The minimum number of confirmations required for the block to be considered valid."
        },
        "returns": {
          "_0": "True if the transaction is included in the block, false otherwise."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mirror()": {
        "notice": "Returns the underlying mirror associated with this verifier."
      },
      "verifyInclusion(uint256,uint256,(bytes,uint256,bytes,bytes))": {
        "notice": "Verifies that the a transaction is included in a given block."
      },
      "verifyPayment(uint256,uint256,(bytes,bytes32,uint256,bytes,bytes),uint256,bytes32,uint256,bool,uint256,bytes32)": {
        "notice": "Verifies that the a transaction cleared, paying a given amount to         a given address. Specifically, verifies a proof that the tx was         in block N, and that block N has at least M confirmations.         Also verifies that if checkOpReturn is true, the transaction has an OP_RETURN output         with the given data, and that the output is at the given index."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}